use crate::lex::types::LexItem;

pub(crate) const LITERAL_TOKENS: &[(&str, LexItem)] = &[
    ("=", LexItem::Assign),
    ("+=", LexItem::AddAssign),
    ("-=", LexItem::SubAssign),
    ("*=", LexItem::MulAssign),
    ("/=", LexItem::DivAssign),
    ("%=", LexItem::ModAssign),
    ("<<=", LexItem::LShiftAssign),
    (">>=", LexItem::RShiftAssign),
    ("&=", LexItem::AndAssign),
    ("|=", LexItem::OrAssign),
    ("^=", LexItem::XorAssign),
    ("!=", LexItem::NotEqual),
    (">=", LexItem::GreaterOrEqual),
    (">", LexItem::GreaterThan),
    ("+", LexItem::Plus),
    ("-", LexItem::Minus),
    ("*", LexItem::Mul),
    ("/", LexItem::Div),
    ("%", LexItem::Mod),
    ("<<", LexItem::LShift),
    (">>", LexItem::RShift),
    ("~", LexItem::Not),
    ("^", LexItem::Xor),
    ("|", LexItem::Or),
    ("&", LexItem::And),
    ("!", LexItem::LogicalNot),
    ("||", LexItem::LogicalOr),
    ("&&", LexItem::LogicalAnd),
    ("==", LexItem::Equals),
    ("!=", LexItem::NotEqual),
    ("<", LexItem::LessThan),
    (">", LexItem::GreaterThan),
    ("<=", LexItem::LessOrEqual),
    (">=", LexItem::GreaterOrEqual),
    ("++", LexItem::Increment),
    ("--", LexItem::Decrement),
    ("(", LexItem::LeftParen),
    (")", LexItem::RightParen),
    ("[", LexItem::LeftBracket),
    ("]", LexItem::RightBracket),
    ("{", LexItem::LeftCurlyBrace),
    ("}", LexItem::RightCurlyBrace),
    ("->", LexItem::PointerDeref),
    (";", LexItem::Semicolon),
    (":", LexItem::Colon),
    (",", LexItem::Comma),
    (".", LexItem::Period),
    ("?", LexItem::Question),
    ("auto\x00", LexItem::Auto),
    ("break\x00", LexItem::Break),
    ("case\x00", LexItem::Case),
    ("char\x00", LexItem::Char),
    ("const\x00", LexItem::Const),
    ("continue\x00", LexItem::Continue),
    ("default\x00", LexItem::Default),
    ("do\x00", LexItem::Do),
    ("double\x00", LexItem::Double),
    ("else\x00", LexItem::Else),
    ("enum\x00", LexItem::Enum),
    ("extern\x00", LexItem::Extern),
    ("float\x00", LexItem::Float),
    ("for\x00", LexItem::For),
    ("goto\x00", LexItem::Goto),
    ("if\x00", LexItem::If),
    ("inline\x00", LexItem::Inline),
    ("int\x00", LexItem::Int),
    ("long\x00", LexItem::Long),
    ("register\x00", LexItem::Register),
    ("restrict\x00", LexItem::Restrict),
    ("return\x00", LexItem::Return),
    ("short\x00", LexItem::Short),
    ("signed\x00", LexItem::Signed),
    ("sizeof\x00", LexItem::Sizeof),
    ("static\x00", LexItem::Static),
    ("struct\x00", LexItem::Struct),
    ("switch\x00", LexItem::Switch),
    ("typedef\x00", LexItem::Typedef),
    ("union\x00", LexItem::Union),
    ("unsigned\x00", LexItem::Unsigned),
    ("void\x00", LexItem::Void),
    ("volatile\x00", LexItem::Volatile),
    ("while\x00", LexItem::While),
    ("_Bool\x00", LexItem::Bool),
    ("_Complex\x00", LexItem::Complex),
    ("_Imaginary\x00", LexItem::Imaginary),
];

pub(super) const INVALID_IDENTIFIER_CHARS: &str = " !\"#%&'()*+,-./;;<=>?@[\\]^`{|}~";

pub(super) fn is_identifier_char(ch: char) -> bool {
    !INVALID_IDENTIFIER_CHARS.chars().any(|c| c == ch)
}
